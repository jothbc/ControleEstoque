/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.SupermercadoCorreia.Estoque.Forms;

import br.SupermercadoCorreia.Estoque.Bean.Group;
import br.SupermercadoCorreia.Estoque.Bean.Product;
import br.SupermercadoCorreia.Estoque.DAO.GroupDAO;
import br.SupermercadoCorreia.Estoque.DAO.ProductDAO;
import br.SupermercadoCorreia.Estoque.JDialogs.RefreshProducts_JD;
import funcoes.CDbl;
import funcoes.RobotJCR;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author User
 */
public class RobotJF extends javax.swing.JFrame {

    private DefaultListModel lista = new DefaultListModel();
    private DefaultTableModel table;
    private Thread thread;
    private boolean isRunning = false;
    private List<Product> products;

    /**
     * Creates new form RobotJF
     */
    public RobotJF() {
        initComponents();
        jList1.setModel(lista);
        buttonGroup1.add(grupoProg);
        buttonGroup1.add(grupoExterno);
        grupoProg.setSelected(true);
        grupoProgActionPerformed(null);
        buttonGroup2.add(qtdPositiva);
        buttonGroup2.add(qtdNegativa);
        qtdPositiva.setSelected(true);
        table = (DefaultTableModel) jTable1.getModel();
        //jTable1.setRowSorter(new TableRowSorter<>(table));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        grupoProg = new javax.swing.JRadioButton();
        grupoExterno = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        qtdPositiva = new javax.swing.JRadioButton();
        qtdNegativa = new javax.swing.JRadioButton();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        baixarProgBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        grupoProg.setText("Grupo do Programa");
        grupoProg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                grupoProgActionPerformed(evt);
            }
        });

        grupoExterno.setText("Grupo da IBS");
        grupoExterno.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                grupoExternoActionPerformed(evt);
            }
        });

        jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jList1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jList1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jList1);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Codigo", "Descrição", "Quantidade", "QTD DISPONIVEL", "Custo", "UN"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Long.class, java.lang.String.class, java.lang.Double.class, java.lang.Double.class, java.lang.Double.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTable1KeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setMinWidth(70);
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(130);
            jTable1.getColumnModel().getColumn(0).setMaxWidth(150);
            jTable1.getColumnModel().getColumn(2).setMinWidth(30);
            jTable1.getColumnModel().getColumn(2).setMaxWidth(70);
            jTable1.getColumnModel().getColumn(3).setMinWidth(30);
            jTable1.getColumnModel().getColumn(3).setMaxWidth(70);
            jTable1.getColumnModel().getColumn(4).setMinWidth(20);
            jTable1.getColumnModel().getColumn(4).setMaxWidth(60);
            jTable1.getColumnModel().getColumn(5).setMinWidth(20);
            jTable1.getColumnModel().getColumn(5).setMaxWidth(50);
        }

        qtdPositiva.setText("Quantidade Positiva");
        qtdPositiva.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                qtdPositivaActionPerformed(evt);
            }
        });

        qtdNegativa.setText("Quantidade Negativa");
        qtdNegativa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                qtdNegativaActionPerformed(evt);
            }
        });

        jButton1.setText("Atualizar Banco de Dados");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Iniciar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Parar");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        baixarProgBtn.setText("Baixar do Prog");
        baixarProgBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                baixarProgBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(grupoProg)
                            .addComponent(grupoExterno)
                            .addComponent(jButton1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 244, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(qtdPositiva)
                            .addComponent(qtdNegativa)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jButton2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(baixarProgBtn)))
                        .addGap(0, 5, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(grupoProg)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(grupoExterno)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(qtdPositiva)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(qtdNegativa)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton2)
                            .addComponent(jButton3)
                            .addComponent(baixarProgBtn))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void grupoExternoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grupoExternoActionPerformed
        if (grupoExterno.isSelected()) {
            refreshList(new GroupDAO().getGroupFirebird());
        }
    }//GEN-LAST:event_grupoExternoActionPerformed

    private void grupoProgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_grupoProgActionPerformed
        if (grupoProg.isSelected()) {
            refreshList(groupDoProg());
        }
    }//GEN-LAST:event_grupoProgActionPerformed

    private void jList1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jList1MouseClicked
        if (jList1.getSelectedIndex() >= 0) {
            preencherTable((Group) lista.getElementAt(jList1.getSelectedIndex()));
        }
    }//GEN-LAST:event_jList1MouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        new RefreshProducts_JD(this, true).setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void qtdPositivaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_qtdPositivaActionPerformed
        if (jList1.getSelectedIndex() >= 0) {
            preencherTable((Group) lista.getElementAt(jList1.getSelectedIndex()));
        }
    }//GEN-LAST:event_qtdPositivaActionPerformed

    private void qtdNegativaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_qtdNegativaActionPerformed
        if (jList1.getSelectedIndex() >= 0) {
            preencherTable((Group) lista.getElementAt(jList1.getSelectedIndex()));
        }
    }//GEN-LAST:event_qtdNegativaActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        iniciarLancamento();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        isRunning = false;
        try {
            thread.join();
            System.out.println("finalizou");
        } catch (InterruptedException ex) {
            Logger.getLogger(RobotJF.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void baixarProgBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_baixarProgBtnActionPerformed
        if (products == null) {
            JOptionPane.showMessageDialog(null, "Ainda não foi lançado nada.");
            return;
        }
        if (products.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Ainda não foi lançado nada.");
            return;
        }
        if (jList1.getSelectedIndex() < 0) {
            JOptionPane.showMessageDialog(null, "Sem grupo selecionado.");
            return;
        }
        for (Product p : products) {
            Group g = (Group) lista.getElementAt(jList1.getSelectedIndex());
            if (!new ProductDAO().setAmount_type_use(Long.parseLong(p.getCode()), 0, g.getTable_mysql())) {
                JOptionPane.showMessageDialog(null, "Problema ao tentar dar baixa no banco de dados.");
            }
        }
        products = null;
    }//GEN-LAST:event_baixarProgBtnActionPerformed

    private void jTable1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_DELETE && jTable1.getSelectedRow() >= 0) {
            removerSelecionado();
        }
    }//GEN-LAST:event_jTable1KeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RobotJF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RobotJF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RobotJF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RobotJF.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RobotJF().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton baixarProgBtn;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JRadioButton grupoExterno;
    private javax.swing.JRadioButton grupoProg;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JList<String> jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JRadioButton qtdNegativa;
    private javax.swing.JRadioButton qtdPositiva;
    // End of variables declaration//GEN-END:variables

    private void refreshList(List<Group> group) {
        qtdPositiva.setVisible(!grupoProg.isSelected());
        qtdNegativa.setVisible(!grupoProg.isSelected());
        baixarProgBtn.setVisible(grupoProg.isSelected());
        lista.removeAllElements();
        for (Group g : group) {
            lista.addElement(g);
        }
    }

    private List<Group> groupDoProg() {
        List<Group> group = new ArrayList<>();

        Group consumo = new Group();
        consumo.setId(ProductDAO.CONSUMO);
        consumo.setDescription("CONSUMO");
        consumo.setTable_mysql(ProductDAO.CONSUMPTION_TABLE);

        Group padaria = new Group();
        padaria.setId(ProductDAO.PADARIA);
        padaria.setDescription("PADARIA");
        padaria.setTable_mysql(ProductDAO.BAKERY_TABLE);

        Group troca = new Group();
        troca.setId(ProductDAO.TROCA);
        troca.setDescription("TROCA");
        troca.setTable_mysql(ProductDAO.EXCHANGE_TABLE);

        Group quebra = new Group();
        quebra.setId(ProductDAO.QUEBRA);
        quebra.setDescription("QUEBRA");
        quebra.setTable_mysql(ProductDAO.BREAK_TABLE);

        group.add(consumo);
        group.add(padaria);
        group.add(troca);
        group.add(quebra);

        return group;
    }

    private void preencherTable(Group group) {
        table.setRowCount(0);
        List<Product> products = new ArrayList<>();
        if (group.isFromFirebird()) {
            products = new ProductDAO().findAll();
            for (Product p : products) {
                if (p.getGroup_db() == group.getId()) {
                    if (qtdPositiva.isSelected() && p.getAmount_db() > 0) {
                        table.addRow(new Object[]{p.getCode(), p.getDescription(), p.getAmount(), p.getAmount_db(), p.getCost_value(), p.getUnity()});
                    } else if (qtdNegativa.isSelected() && p.getAmount_db() < 0) {
                        table.addRow(new Object[]{p.getCode(), p.getDescription(), p.getAmount(), p.getAmount_db(), p.getCost_value(), p.getUnity()});
                    }
                }
            }
        } else {
            String tabela;
            switch (group.getId()) {
                case 1:
                    tabela = ProductDAO.CONSUMPTION_TABLE;
                    break;
                case 2:
                    tabela = ProductDAO.BAKERY_TABLE;
                    break;
                case 3:
                    tabela = ProductDAO.EXCHANGE_TABLE;
                    break;
                case 4:
                    tabela = ProductDAO.BREAK_TABLE;
                    break;
                default:
                    JOptionPane.showMessageDialog(null, "Tabela não encontrada.");
                    return;
            }
            products = new ProductDAO().findAll_Type_Use(tabela);
            for (Product p : products) {
                Object[] dado = {p.getCode(), p.getDescription(), p.getAmount(), p.getAmount_db(), p.getCost_value(), p.getUnity()};
                table.addRow(dado);
            }
        }
    }

    private synchronized void iniciarLancamento() {
        isRunning = true;
        thread = new Thread(() -> {
            try {
                System.out.println("Thread robot ativa: " + System.currentTimeMillis());
                products = new ArrayList<>();
                RobotJCR.AltTab(50);
                thread.sleep(2000);
                int count = 0;
                while (count < jTable1.getRowCount() && isRunning) {
                    try {
                        String codigo = getCodeSelected(count);
                        String quantidade = getAmountSelected(count);
                        String valor = getValueSelected(count);

                        if (!quantidade.equals("0")) {
                            RobotJCR.executar(codigo, 50);
                            RobotJCR.executar(KeyEvent.VK_ENTER, 50);

                            RobotJCR.executar(quantidade, 50);
                            RobotJCR.executar(KeyEvent.VK_ENTER, 50);

                            RobotJCR.executar(valor, 50);
                            RobotJCR.executar(KeyEvent.VK_ENTER, 50);

                            Product p = new Product();
                            //p.setAmount(getAmountSelected(count));
                            products.add(p);

                            table.removeRow(count);

                        } else {
                            count++;
                        }
                    } catch (Exception ex) {
                        Logger.getLogger(RobotJF.class.getName()).log(Level.SEVERE, null, ex);
                        JOptionPane.showMessageDialog(null, ex);
                        isRunning = false;
                        break;
                    }
                }
                if (!products.isEmpty()) {
                    int op = JOptionPane.showOptionDialog(null, "Todos os itens lançados, deseja zera-los novamente?", "Remover das baixas", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE, null, null, null);
                    if (op == JOptionPane.YES_OPTION) {
                        baixarProgBtnActionPerformed(null);
                    }
                }
            } catch (InterruptedException ex) {
                Logger.getLogger(RobotJF.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
        thread.start();
    }

    private String getCodeSelected(int x) {
        return (String) jTable1.getValueAt(x, 0);
    }

    private String getAmountSelected(int x) throws Exception {
        int local = 2;
        if (grupoExterno.isSelected()) {
            local = 3;
        }
        double amount = (double) jTable1.getValueAt(x, local);
        if (grupoExterno.isSelected() && qtdNegativa.isSelected()) { //se for pra lançar os negativos inverte a quantidade
            amount *= -1;
        }
        String un = (String) jTable1.getValueAt(x, 5);
        if (un.equals("UN")) {
            // pode retornar valor 0
            return Integer.toString((int) amount);
        }
        return Double.toString(CDbl.CDblDuasCasas(amount));
    }

    private String getValueSelected(int x) {
        double valor = (double) jTable1.getValueAt(x, 4);
        if (valor == 0) {
            valor = 1;
        }
        return Double.toString(valor);
    }

    private void removerSelecionado() {
        table.removeRow(jTable1.getSelectedRow());
    }
}
